/* tslint:disable */
/* eslint-disable */
/**
 * OpenHolidays API v1
 * Open Data API for public and school holidays
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CountryResponse,
  LanguageResponse,
  SubdivisionResponse,
} from '../models/index';
import {
    CountryResponseFromJSON,
    CountryResponseToJSON,
    LanguageResponseFromJSON,
    LanguageResponseToJSON,
    SubdivisionResponseFromJSON,
    SubdivisionResponseToJSON,
} from '../models/index';

export interface CountriesGetRequest {
    languageIsoCode?: string;
}

export interface LanguagesGetRequest {
    languageIsoCode?: string;
}

export interface SubdivisionsGetRequest {
    countryIsoCode: string;
    languageIsoCode?: string;
}

/**
 * 
 */
export class RegionalApi extends runtime.BaseAPI {

    /**
     * Returns a list of all supported countries
     */
    async countriesGetRaw(requestParameters: CountriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryResponseFromJSON));
    }

    /**
     * Returns a list of all supported countries
     */
    async countriesGet(requestParameters: CountriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryResponse>> {
        const response = await this.countriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all used languages
     */
    async languagesGetRaw(requestParameters: LanguagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LanguageResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LanguageResponseFromJSON));
    }

    /**
     * Returns a list of all used languages
     */
    async languagesGet(requestParameters: LanguagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LanguageResponse>> {
        const response = await this.languagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of relevant subdivisions for a supported country (if any)
     */
    async subdivisionsGetRaw(requestParameters: SubdivisionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubdivisionResponse>>> {
        if (requestParameters['countryIsoCode'] == null) {
            throw new runtime.RequiredError(
                'countryIsoCode',
                'Required parameter "countryIsoCode" was null or undefined when calling subdivisionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['countryIsoCode'] != null) {
            queryParameters['countryIsoCode'] = requestParameters['countryIsoCode'];
        }

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Subdivisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubdivisionResponseFromJSON));
    }

    /**
     * Returns a list of relevant subdivisions for a supported country (if any)
     */
    async subdivisionsGet(requestParameters: SubdivisionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubdivisionResponse>> {
        const response = await this.subdivisionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
