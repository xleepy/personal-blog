/* tslint:disable */
/* eslint-disable */
/**
 * OpenHolidays API v1
 * Open Data API for public and school holidays
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HolidayByDateResponse,
  HolidayResponse,
} from '../models/index';
import {
    HolidayByDateResponseFromJSON,
    HolidayByDateResponseToJSON,
    HolidayResponseFromJSON,
    HolidayResponseToJSON,
} from '../models/index';

export interface PublicHolidaysByDateGetRequest {
    date: Date;
    languageIsoCode?: string;
}

export interface PublicHolidaysGetRequest {
    countryIsoCode: string;
    validFrom: Date;
    validTo: Date;
    languageIsoCode?: string;
    subdivisionCode?: string;
}

export interface SchoolHolidaysByDateGetRequest {
    date: Date;
    languageIsoCode?: string;
}

export interface SchoolHolidaysGetRequest {
    countryIsoCode: string;
    validFrom: Date;
    validTo: Date;
    languageIsoCode?: string;
    subdivisionCode?: string;
}

/**
 * 
 */
export class HolidaysApi extends runtime.BaseAPI {

    /**
     * Returns a list of public holidays from all countries for a given date.
     */
    async publicHolidaysByDateGetRaw(requestParameters: PublicHolidaysByDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HolidayByDateResponse>>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling publicHolidaysByDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PublicHolidaysByDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HolidayByDateResponseFromJSON));
    }

    /**
     * Returns a list of public holidays from all countries for a given date.
     */
    async publicHolidaysByDateGet(requestParameters: PublicHolidaysByDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HolidayByDateResponse>> {
        const response = await this.publicHolidaysByDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of public holidays for a given country
     */
    async publicHolidaysGetRaw(requestParameters: PublicHolidaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HolidayResponse>>> {
        if (requestParameters['countryIsoCode'] == null) {
            throw new runtime.RequiredError(
                'countryIsoCode',
                'Required parameter "countryIsoCode" was null or undefined when calling publicHolidaysGet().'
            );
        }

        if (requestParameters['validFrom'] == null) {
            throw new runtime.RequiredError(
                'validFrom',
                'Required parameter "validFrom" was null or undefined when calling publicHolidaysGet().'
            );
        }

        if (requestParameters['validTo'] == null) {
            throw new runtime.RequiredError(
                'validTo',
                'Required parameter "validTo" was null or undefined when calling publicHolidaysGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['countryIsoCode'] != null) {
            queryParameters['countryIsoCode'] = requestParameters['countryIsoCode'];
        }

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        if (requestParameters['validFrom'] != null) {
            queryParameters['validFrom'] = (requestParameters['validFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['validTo'] != null) {
            queryParameters['validTo'] = (requestParameters['validTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['subdivisionCode'] != null) {
            queryParameters['subdivisionCode'] = requestParameters['subdivisionCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PublicHolidays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HolidayResponseFromJSON));
    }

    /**
     * Returns list of public holidays for a given country
     */
    async publicHolidaysGet(requestParameters: PublicHolidaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HolidayResponse>> {
        const response = await this.publicHolidaysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of school holidays from all countries for a given date.
     */
    async schoolHolidaysByDateGetRaw(requestParameters: SchoolHolidaysByDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HolidayByDateResponse>>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling schoolHolidaysByDateGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/SchoolHolidaysByDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HolidayByDateResponseFromJSON));
    }

    /**
     * Returns a list of school holidays from all countries for a given date.
     */
    async schoolHolidaysByDateGet(requestParameters: SchoolHolidaysByDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HolidayByDateResponse>> {
        const response = await this.schoolHolidaysByDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of official school holidays for a given country
     */
    async schoolHolidaysGetRaw(requestParameters: SchoolHolidaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HolidayResponse>>> {
        if (requestParameters['countryIsoCode'] == null) {
            throw new runtime.RequiredError(
                'countryIsoCode',
                'Required parameter "countryIsoCode" was null or undefined when calling schoolHolidaysGet().'
            );
        }

        if (requestParameters['validFrom'] == null) {
            throw new runtime.RequiredError(
                'validFrom',
                'Required parameter "validFrom" was null or undefined when calling schoolHolidaysGet().'
            );
        }

        if (requestParameters['validTo'] == null) {
            throw new runtime.RequiredError(
                'validTo',
                'Required parameter "validTo" was null or undefined when calling schoolHolidaysGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['countryIsoCode'] != null) {
            queryParameters['countryIsoCode'] = requestParameters['countryIsoCode'];
        }

        if (requestParameters['languageIsoCode'] != null) {
            queryParameters['languageIsoCode'] = requestParameters['languageIsoCode'];
        }

        if (requestParameters['validFrom'] != null) {
            queryParameters['validFrom'] = (requestParameters['validFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['validTo'] != null) {
            queryParameters['validTo'] = (requestParameters['validTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['subdivisionCode'] != null) {
            queryParameters['subdivisionCode'] = requestParameters['subdivisionCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/SchoolHolidays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HolidayResponseFromJSON));
    }

    /**
     * Returns list of official school holidays for a given country
     */
    async schoolHolidaysGet(requestParameters: SchoolHolidaysGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HolidayResponse>> {
        const response = await this.schoolHolidaysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
