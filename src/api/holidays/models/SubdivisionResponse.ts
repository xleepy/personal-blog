/* tslint:disable */
/* eslint-disable */
/**
 * OpenHolidays API v1
 * Open Data API for public and school holidays
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocalizedText } from './LocalizedText';
import {
    LocalizedTextFromJSON,
    LocalizedTextFromJSONTyped,
    LocalizedTextToJSON,
    LocalizedTextToJSONTyped,
} from './LocalizedText';

/**
 * Representation of a subdivision
 * @export
 * @interface SubdivisionResponse
 */
export interface SubdivisionResponse {
    /**
     * Localized categories of the subdivision
     * @type {Array<LocalizedText>}
     * @memberof SubdivisionResponse
     */
    category: Array<LocalizedText>;
    /**
     * Child subdivisions
     * @type {Array<SubdivisionResponse>}
     * @memberof SubdivisionResponse
     */
    children?: Array<SubdivisionResponse> | null;
    /**
     * Subdivision code
     * @type {string}
     * @memberof SubdivisionResponse
     */
    code: string;
    /**
     * Localized comments of the subdivision
     * @type {Array<LocalizedText>}
     * @memberof SubdivisionResponse
     */
    comment: Array<LocalizedText>;
    /**
     * ISO 3166-2 subdivision code (if defined)
     * @type {string}
     * @memberof SubdivisionResponse
     */
    isoCode?: string | null;
    /**
     * Localized names of the subdivision
     * @type {Array<LocalizedText>}
     * @memberof SubdivisionResponse
     */
    name: Array<LocalizedText>;
    /**
     * Official languages as ISO-639-1 codes
     * @type {Array<string>}
     * @memberof SubdivisionResponse
     */
    officialLanguages: Array<string>;
    /**
     * Short name for display
     * @type {string}
     * @memberof SubdivisionResponse
     */
    shortName: string;
}

/**
 * Check if a given object implements the SubdivisionResponse interface.
 */
export function instanceOfSubdivisionResponse(value: object): value is SubdivisionResponse {
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('comment' in value) || value['comment'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('officialLanguages' in value) || value['officialLanguages'] === undefined) return false;
    if (!('shortName' in value) || value['shortName'] === undefined) return false;
    return true;
}

export function SubdivisionResponseFromJSON(json: any): SubdivisionResponse {
    return SubdivisionResponseFromJSONTyped(json, false);
}

export function SubdivisionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubdivisionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'category': ((json['category'] as Array<any>).map(LocalizedTextFromJSON)),
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(SubdivisionResponseFromJSON)),
        'code': json['code'],
        'comment': ((json['comment'] as Array<any>).map(LocalizedTextFromJSON)),
        'isoCode': json['isoCode'] == null ? undefined : json['isoCode'],
        'name': ((json['name'] as Array<any>).map(LocalizedTextFromJSON)),
        'officialLanguages': json['officialLanguages'],
        'shortName': json['shortName'],
    };
}

export function SubdivisionResponseToJSON(json: any): SubdivisionResponse {
    return SubdivisionResponseToJSONTyped(json, false);
}

export function SubdivisionResponseToJSONTyped(value?: SubdivisionResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'category': ((value['category'] as Array<any>).map(LocalizedTextToJSON)),
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(SubdivisionResponseToJSON)),
        'code': value['code'],
        'comment': ((value['comment'] as Array<any>).map(LocalizedTextToJSON)),
        'isoCode': value['isoCode'],
        'name': ((value['name'] as Array<any>).map(LocalizedTextToJSON)),
        'officialLanguages': value['officialLanguages'],
        'shortName': value['shortName'],
    };
}

