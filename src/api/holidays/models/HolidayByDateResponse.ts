/* tslint:disable */
/* eslint-disable */
/**
 * OpenHolidays API v1
 * Open Data API for public and school holidays
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountryReference } from './CountryReference';
import {
    CountryReferenceFromJSON,
    CountryReferenceFromJSONTyped,
    CountryReferenceToJSON,
    CountryReferenceToJSONTyped,
} from './CountryReference';
import type { RegionalScope } from './RegionalScope';
import {
    RegionalScopeFromJSON,
    RegionalScopeFromJSONTyped,
    RegionalScopeToJSON,
    RegionalScopeToJSONTyped,
} from './RegionalScope';
import type { TemporalScope } from './TemporalScope';
import {
    TemporalScopeFromJSON,
    TemporalScopeFromJSONTyped,
    TemporalScopeToJSON,
    TemporalScopeToJSONTyped,
} from './TemporalScope';
import type { HolidayType } from './HolidayType';
import {
    HolidayTypeFromJSON,
    HolidayTypeFromJSONTyped,
    HolidayTypeToJSON,
    HolidayTypeToJSONTyped,
} from './HolidayType';
import type { SubdivisionReference } from './SubdivisionReference';
import {
    SubdivisionReferenceFromJSON,
    SubdivisionReferenceFromJSONTyped,
    SubdivisionReferenceToJSON,
    SubdivisionReferenceToJSONTyped,
} from './SubdivisionReference';
import type { LocalizedText } from './LocalizedText';
import {
    LocalizedTextFromJSON,
    LocalizedTextFromJSONTyped,
    LocalizedTextToJSON,
    LocalizedTextToJSONTyped,
} from './LocalizedText';

/**
 * Representation of a holiday by date
 * @export
 * @interface HolidayByDateResponse
 */
export interface HolidayByDateResponse {
    /**
     * Additional localized comments
     * @type {Array<LocalizedText>}
     * @memberof HolidayByDateResponse
     */
    comment?: Array<LocalizedText> | null;
    /**
     * 
     * @type {CountryReference}
     * @memberof HolidayByDateResponse
     */
    country: CountryReference;
    /**
     * Unqiue holiday id
     * @type {string}
     * @memberof HolidayByDateResponse
     */
    id: string;
    /**
     * Localized names of the holiday
     * @type {Array<LocalizedText>}
     * @memberof HolidayByDateResponse
     */
    name: Array<LocalizedText>;
    /**
     * Is the holiday nationwide?
     * @type {boolean}
     * @memberof HolidayByDateResponse
     */
    nationwide: boolean;
    /**
     * 
     * @type {RegionalScope}
     * @memberof HolidayByDateResponse
     */
    regionalScope?: RegionalScope;
    /**
     * List of subdivision references
     * @type {Array<SubdivisionReference>}
     * @memberof HolidayByDateResponse
     */
    subdivisions: Array<SubdivisionReference>;
    /**
     * 
     * @type {TemporalScope}
     * @memberof HolidayByDateResponse
     */
    temporalScope?: TemporalScope;
    /**
     * 
     * @type {HolidayType}
     * @memberof HolidayByDateResponse
     */
    type: HolidayType;
}



/**
 * Check if a given object implements the HolidayByDateResponse interface.
 */
export function instanceOfHolidayByDateResponse(value: object): value is HolidayByDateResponse {
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nationwide' in value) || value['nationwide'] === undefined) return false;
    if (!('subdivisions' in value) || value['subdivisions'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function HolidayByDateResponseFromJSON(json: any): HolidayByDateResponse {
    return HolidayByDateResponseFromJSONTyped(json, false);
}

export function HolidayByDateResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): HolidayByDateResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'comment': json['comment'] == null ? undefined : ((json['comment'] as Array<any>).map(LocalizedTextFromJSON)),
        'country': CountryReferenceFromJSON(json['country']),
        'id': json['id'],
        'name': ((json['name'] as Array<any>).map(LocalizedTextFromJSON)),
        'nationwide': json['nationwide'],
        'regionalScope': json['regionalScope'] == null ? undefined : RegionalScopeFromJSON(json['regionalScope']),
        'subdivisions': ((json['subdivisions'] as Array<any>).map(SubdivisionReferenceFromJSON)),
        'temporalScope': json['temporalScope'] == null ? undefined : TemporalScopeFromJSON(json['temporalScope']),
        'type': HolidayTypeFromJSON(json['type']),
    };
}

export function HolidayByDateResponseToJSON(json: any): HolidayByDateResponse {
    return HolidayByDateResponseToJSONTyped(json, false);
}

export function HolidayByDateResponseToJSONTyped(value?: HolidayByDateResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comment': value['comment'] == null ? undefined : ((value['comment'] as Array<any>).map(LocalizedTextToJSON)),
        'country': CountryReferenceToJSON(value['country']),
        'id': value['id'],
        'name': ((value['name'] as Array<any>).map(LocalizedTextToJSON)),
        'nationwide': value['nationwide'],
        'regionalScope': RegionalScopeToJSON(value['regionalScope']),
        'subdivisions': ((value['subdivisions'] as Array<any>).map(SubdivisionReferenceToJSON)),
        'temporalScope': TemporalScopeToJSON(value['temporalScope']),
        'type': HolidayTypeToJSON(value['type']),
    };
}

