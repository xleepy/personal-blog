/* tslint:disable */
/* eslint-disable */
/**
 * OpenHolidays API v1
 * Open Data API for public and school holidays
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocalizedText } from './LocalizedText';
import {
    LocalizedTextFromJSON,
    LocalizedTextFromJSONTyped,
    LocalizedTextToJSON,
    LocalizedTextToJSONTyped,
} from './LocalizedText';

/**
 * Representation of a language as defined in ISO-639-1
 * @export
 * @interface LanguageResponse
 */
export interface LanguageResponse {
    /**
     * ISO-639-1 language code
     * @type {string}
     * @memberof LanguageResponse
     */
    isoCode: string;
    /**
     * Localized language names
     * @type {Array<LocalizedText>}
     * @memberof LanguageResponse
     */
    name: Array<LocalizedText>;
}

/**
 * Check if a given object implements the LanguageResponse interface.
 */
export function instanceOfLanguageResponse(value: object): value is LanguageResponse {
    if (!('isoCode' in value) || value['isoCode'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function LanguageResponseFromJSON(json: any): LanguageResponse {
    return LanguageResponseFromJSONTyped(json, false);
}

export function LanguageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): LanguageResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'isoCode': json['isoCode'],
        'name': ((json['name'] as Array<any>).map(LocalizedTextFromJSON)),
    };
}

export function LanguageResponseToJSON(json: any): LanguageResponse {
    return LanguageResponseToJSONTyped(json, false);
}

export function LanguageResponseToJSONTyped(value?: LanguageResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'isoCode': value['isoCode'],
        'name': ((value['name'] as Array<any>).map(LocalizedTextToJSON)),
    };
}

